package sources

import (
	"encoding/json"
	"testing"
)

type AutoGenerated struct {
	Args struct {
	} `json:"args"`
	Headers struct {
		Accept                  string `json:"Accept"`
		AcceptEncoding          string `json:"Accept-Encoding"`
		AcceptLanguage          string `json:"Accept-Language"`
		CacheControl            string `json:"Cache-Control"`
		Connection              string `json:"Connection"`
		Host                    string `json:"Host"`
		UpgradeInsecureRequests string `json:"Upgrade-Insecure-Requests"`
		UserAgent               string `json:"User-Agent"`
		XBluecoatVia            string `json:"X-Bluecoat-Via"`
	} `json:"headers"`
	Origin string `json:"origin"`
	URL    string `json:"url"`
}

func TestGetRequest(t *testing.T) {
	testString := "http://httpbin.org/get"
	response := getRequest(testString)
	if response == nil {
		t.Fatal("Get request has not been completed.")
	}
	A := &AutoGenerated{}
	err := json.Unmarshal(response, A)
	if err != nil {
		t.Fatal("Failed to unmarshal the data.")
	}
	expected := "httpbin.org"
	if A.Headers.Host != expected {
		t.Fatalf("Not receiving the correct host name. Expected: %s, Got: %s", expected, A.Headers.Host)
	}
}

func TestUnmarshal(t *testing.T) {
	testUrl := "http://httpbin.org/get"
	testBody := getRequest(testUrl)
	testMap := &AutoGenerated{}
	unmarshal([]byte(testBody), testMap)
	expected := "httpbin.org"
	if testMap.Headers.Host != expected {
		t.Fatalf("Not receiving correct host name. Expected: %s, Got: %s", expected, testMap.Headers.Host)
	}
	expected = "http://httpbin.org/get"
	if testMap.URL != expected {
		t.Fatalf("Not receiving correct URL. Expected: %s, Got: %s", expected, testMap.URL)
	}
}

func TestLabelTypes(t *testing.T) {
	units := ""
	pcpType := ""
	name := "kal"
	response := typeLabel(units, pcpType, name)
	expected := "kal"
	if response != expected {
		t.Fatalf("Failed when units and type strings were empty. Expected: %s, Got: %s", expected, response)
	}

	units = ""
	pcpType = ""
	name = ""
	response = typeLabel(units, pcpType, name)
	expected = ""
	if response != expected {
		t.Fatalf("Failed when all strings were empty. Expected: %s, Got: %s", expected, response)
	}

	units = "kal"
	pcpType = "CoUnTeR"
	name = "kal"
	response = typeLabel(units, pcpType, name)
	expected = "kal_kal_total"
	if response != expected {
		t.Fatalf("Failed when type was case sensitive. Expected: %s, Got: %s", expected, response)
	}

	units = "tery"
	pcpType = "gagage"
	name = "kal"
	response = typeLabel(units, pcpType, name)
	expected = "kal_tery"
	if response != expected {
		t.Fatalf("Failed when type is any other than counter or empty. Expected: %s, Got: %s", expected, response)
	}

	units = "87"
	pcpType = "countER"
	name = "k.a.l"
	response = typeLabel(units, pcpType, name)
	expected = "k_a_l_87_total"
	if response != expected {
		t.Fatalf("Failed when there were periods in the name. Expected: %s, Got: %s", expected, response)
	}
}
