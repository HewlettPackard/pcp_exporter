package sources

import (
	"testing"
	"encoding/json"
	"strings"
)

type AutoGenerated struct {
	Args struct {
	} `json:"args"`
	Headers struct {
		Accept string `json:"Accept"`
		AcceptEncoding string `json:"Accept-Encoding"`
		AcceptLanguage string `json:"Accept-Language"`
		CacheControl string `json:"Cache-Control"`
		Connection string `json:"Connection"`
		Host string `json:"Host"`
		UpgradeInsecureRequests string `json:"Upgrade-Insecure-Requests"`
		UserAgent string `json:"User-Agent"`
		XBluecoatVia string `json:"X-Bluecoat-Via"`
	} `json:"headers"`
	Origin string `json:"origin"`
	URL string `json:"url"`
}

func TestGetRequest(t *testing.T) {
	testString := "http://httpbin.org/get"
	response := getRequest(testString)
	if response == nil {
		t.Fatal("retrieved an unexpected result")
	}
	A := &AutoGenerated{}
	err := json.Unmarshal(response, A)
	if err != nil {
		t.Fatal("fail")
	}
	if A.Headers.Host != "httpbin.org" {
		t.Fatal("fail")
	}

	testString = "http://htPdfsaft"
        response = getRequest(testString)
        if response == nil {
               t.Fatal("retrieved an unexpected result")
        }
	s := string(response[:])
	if ! strings.Contains(s,"Network Error") {
		t.Fatal(s)
	}

}

func TestUnmarshal(t *testing.T) {
	testUrl := "http://httpbin.org/get"
	testBody := getRequest(testUrl)
	testMap := &AutoGenerated{}
	unmarshal([]byte(testBody),testMap)	
	if testMap.Headers.Host != "httpbin.org" {
		t.Fatal("faIL")
	}
	if testMap.Origin == "12kk" {
		t.Fatal("fail")
	}
	if testMap.URL != "http://httpbin.org/get" {
		t.Fatal("fail")
	}
				
}
  
func TestLabelTypes(t *testing.T) {
	testStringOne := ""
	testStringTwo := "" 	
	testStringThree := "kal"
	response := typeLabel(testStringOne, testStringTwo, testStringThree)
	if response != "kal" {
		t.Fatal(response)
	}
	
	testStringOne = ""
        testStringTwo = ""
        testStringThree = ""
        response = typeLabel(testStringOne, testStringTwo, testStringThree)
	if response != "" {
                t.Fatal(response)
        } 

	testStringOne = "kal"
        testStringTwo = "CoUnTeR"
        testStringThree = "kal"
        response = typeLabel(testStringOne, testStringTwo, testStringThree)
	if response != "kal_kal_total" {
                t.Fatal(response)
        }
 
	testStringOne = "tery"
        testStringTwo = "gagage"
        testStringThree = "kal"
        response = typeLabel(testStringOne, testStringTwo, testStringThree)
	if response != "kal_tery" {
                t.Fatal(response)
        }
 
	testStringOne = "87"
        testStringTwo = "countER"
        testStringThree = "k.a.l"
        response = typeLabel(testStringOne, testStringTwo, testStringThree)
	if response != "k_a_l_87_total" {
                t.Fatal(response)
        } 

}


